import local_settings as settings
import db as db
import web as web
import telebot
from telebot import types
import time
import os


bot = telebot.TeleBot(settings.bot_token)
bot.delete_webhook()

bot.set_my_commands([
    telebot.types.BotCommand('/start', "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—Å—è"),
    telebot.types.BotCommand('/add_gaz', '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–∞–≤–∫—É'),
    telebot.types.BotCommand('/get_gaz', '–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –∑–∞–ø—Ä–∞–≤–∫–∏'),
    telebot.types.BotCommand('/get_km', '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–µ–≥ –∑–∞ –º–µ—Å—è—Ü'),
    telebot.types.BotCommand('/get_gaz_list', '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–∞–≤–æ–∫ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ'),
    telebot.types.BotCommand('/register', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
    telebot.types.BotCommand('/test', 'Test'),
    telebot.types.BotCommand('/exel', '–ü–æ–ª—É—á–∏—Ç—å EXEL'),
    telebot.types.BotCommand('/delete', '–£–¥–∞–ª–∏—Ç—å –º–µ–Ω—è'),
    telebot.types.BotCommand('/sklad', '–†–∞–±–æ—Ç–∞ —Å–æ —Å–∫–ª–∞–¥–æ–º')
])

@bot.message_handler(commands=['start'])
def handle_start(message):
   msg = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
   chat_id = message.chat.id
   bot.send_message(message.chat.id, msg) 
   
@bot.message_handler(commands=['get_km'])
def get_km(message):
    user = db.get_user_data(message.chat.id)
    bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ')
    bot.send_message(message.chat.id, web.get_km(user[0][0], user[0][1]))


@bot.message_handler(commands=['add_gaz'])
def fadd_gaz(message):
    msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–ø—Ä–∞–≤–∏–ª–∏')
    bot.register_next_step_handler(msg, add_gaz)
    
def add_gaz(message):
    try:
        numb = int(message.text)
        msg = db.add_gas(message.chat.id, numb)
        bot.send_message(message.chat.id, msg)
    except:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å')
    
    
@bot.message_handler(commands=['get_gaz'])
def get_gaz(message):
    msg = db.get_km(message.chat.id)
    bot.send_message(message.chat.id, msg)
    
@bot.message_handler(commands=['get_gaz_list'])
def get_gaz(message):
    data = db.get_gaz_list(message.chat.id)
    str_test =''
    for i in range(0, len(data)):
        msg = str(data[i][1]) + ' –≤—ã –∑–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ ' + str(data[i][0]) + ' –ª–∏—Ç—Ä–æ–≤'
        str_test += ('<i>' + str(data[i][1])) + '</i>' + '\n<span class="tg-spoiler">–í—ã –∑–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ ' + str(data[i][0]) + ' –ª–∏—Ç—Ä–æ–≤</span>\n'
        time.sleep(0.5)
        
    bot.send_message(message.chat.id, str_test, parse_mode='html')

 
 
@bot.message_handler(commands=['exel'])
def exel(message):
    bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞')
    user = db.get_user_data(message.chat.id)
    file = web.get_list(user[0][0], user[0][1], message.chat.id)
    doc = open(file, 'rb')
    bot.send_document(message.chat.id, doc)
    bot.send_message(message.chat.id, '–í–∞–º –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª.')
    os.remove(file)
    bot.send_message(message.chat.id, '–§–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª —É–¥–∞–ª–µ–Ω')

@bot.message_handler(commands=['test'])
def test(message):
    str_b = '<b>–≠—Ç–æ b </b>'
    str_i = '<i> This is i </i>'
    str_u = '<u>This is u</u>'
    str_s = '<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>'
    str_span = '<span class="tg-spoiler">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>'
    str_bold = '<b>bold <i>italic bold <s>italic bold strikethrough <span class="tg-spoiler">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>'
    str_a = '<a href="http://www.example.com/">inline URL</a>'
    str_line = '<a href="tg://user?id=7831441950">inline mention of a user my</a>'
    str_em = '<tg-emoji emoji-id="5368324170671202286">üëç</tg-emoji>'
    str_code = '<code>inline fixed-width code</code>'
    str_pre = '<pre>pre-formatted fixed-width code block</pre>'
    str_pre_code = '<pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>'
    str_block = '<blockquote>Block quotation started\nBlock quotation continued\nThe last line of the block quotation</blockquote>'
    str_q = '<blockquote expandable>Expandable block quotation started\nExpandable block quotation continued\nExpandable block quotation continued\nHidden by default part of the block quotation started\nExpandable block quotation continued\nThe last line of the block quotation</blockquote>'
    bot.send_message(message.chat.id, str_b, parse_mode='html')
    bot.send_message(message.chat.id, str_i, parse_mode='html')
    bot.send_message(message.chat.id, str_u, parse_mode='html')
    bot.send_message(message.chat.id, str_s, parse_mode='html')
    bot.send_message(message.chat.id, str_span, parse_mode='html')
    bot.send_message(message.chat.id, str_bold, parse_mode='html')
    bot.send_message(message.chat.id, str_line, parse_mode='html')
    bot.send_message(message.chat.id, str_em, parse_mode='html')
    bot.send_message(message.chat.id, str_code, parse_mode='html')
    bot.send_message(message.chat.id, str_pre, parse_mode='html')
    bot.send_message(message.chat.id, str_pre_code, parse_mode='html')
    bot.send_message(message.chat.id, str_block, parse_mode='html')
    bot.send_message(message.chat.id, str_q, parse_mode='html')
    bot.send_message(message.chat.id, str_a, parse_mode='html')
    bot.send_message(message.chat.id, 'Message')

    
    
@bot.message_handler(commands=['delete'])
def delete_user(message):
    bot.send_message(message.chat.id, db.delete_user(message.chat.id))

@bot.message_handler(commands=['register'])
def registration(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω")
    bot.register_next_step_handler(msg, enter_password)
    
def enter_password(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å")
    bot.register_next_step_handler(msg, register_user, message.text)
    
def register_user(message, login):
    ret = '–í–∞—à –ª–æ–≥–∏–Ω: ' + login + '\n–í–∞—à –ø–∞—Ä–æ–ª—å: ' + message.text
    markup = types.InlineKeyboardMarkup()
    btn_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes_tru')
    btn_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no_true')
    markup.row(btn_yes, btn_no)
    bot.send_message(message.chat.id, ret, parse_mode='Markdown', reply_markup=markup)
    


@bot.message_handler(commands=['sklad'])
def sklad(message):
    markup = types.InlineKeyboardMarkup()
    btn_add = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='add_zip')
    btn_del = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='del_zip')
    btn_update = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data='change_zip')
    btn_list = types.InlineKeyboardButton(text='GOOD —Å–ø–∏—Å–æ–∫', callback_data='get_good')
    btn_bad = types.InlineKeyboardButton(text='BAD —Å–ø–∏—Å–æ–∫', callback_data='get_dab')
    btn_sps = types.InlineKeyboardButton(text='–°–ø–∏—Å–∞—Ç—å', callback_data='spisat_zip')
    btn_all = types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–∞ EXEL', callback_data='get_all')
    msg = '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?'
    markup.row(btn_add, btn_update)
    markup.row(btn_list, btn_bad)
    markup.row(btn_sps)
    markup.row(btn_all)
    bot.send_message(message.chat.id, msg, parse_mode='html', reply_markup=markup)
    


def add_zip(message):
    ms = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä')
    bot.register_next_step_handler(ms, add_zip_serial, message.text)
    
def add_zip_serial(message, name):
    msg = '–ü—Ä–æ–≤–µ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ó–ò–ü: <blockquote>' + name + '</blockquote> –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: <blockquote>' + message.text + '</blockquote>'
    markup = types.InlineKeyboardMarkup()
    btn_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes_zip_add')
    btn_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no_true')
    markup.row(btn_yes, btn_no)
    bot.send_message(message.chat.id, msg, parse_mode='html', reply_markup=markup)
    
def spis_zip(message):
    first_msg = '–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É: <blockquote>' + message.text + '</blockquote>'
    bot.send_message(message.chat.id, first_msg, parse_mode='html')
    data = db.find_serial(message.chat.id, message.text)

    if len(data) > 1:
        bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–æ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
    elif len(data) == 0:
        bot.send_message(message.chat.id, '–° —Ç–∞–∫–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π')
    else:
        msg_zip = '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <blockquote>' + data[0][1] + '</blockquote> –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: <blockquote>' + data[0][3] + '</blockquote> –°—Ç–∞—Ç—É—Å: <blockquote>' + data[0][2] + '</blockquote>'
        markup = types.InlineKeyboardMarkup()
        btn_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes_spisat')
        btn_no = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no_true')
        markup.row(btn_yes, btn_no)
        bot.send_message(message.chat.id, msg_zip, parse_mode='html', reply_markup=markup)

def change_status_zip(message):
    first_msg = '–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É: <blockquote>' + message.text + '</blockquote>'
    bot.send_message(message.chat.id, first_msg, parse_mode='html')
    data = db.find_serial(message.chat.id, message.text)

    if len(data) > 1:
        bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–æ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
    elif len(data) == 0:
        bot.send_message(message.chat.id, '–° —Ç–∞–∫–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π')
    else:
        msg_zip = '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <blockquote>' + data[0][1] + '</blockquote> –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: <blockquote>' + data[0][3] + '</blockquote> –°—Ç–∞—Ç—É—Å: <blockquote>' + data[0][2] + '</blockquote>'
        markup = types.InlineKeyboardMarkup()
        btn_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes_change_status_zip')
        btn_no = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no_true')
        markup.row(btn_yes, btn_no)
        bot.send_message(message.chat.id, msg_zip, parse_mode='html', reply_markup=markup)

@bot.callback_query_handler(func=lambda call:True)
def response(function_call):
    if function_call.message:           
        if function_call.data == "yes_tru":
            str = function_call.message.text.split()
            user_login = str[2]
            user_password = str[5]
            bot.send_message(function_call.message.chat.id, db.register_user(user_login, user_password, function_call.message.chat.id))
            bot.send_message(function_call.message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
            
            user = db.get_user_data(function_call.message.chat.id)
            bot.send_message(function_call.message.chat.id, web.test_auth(user[0][0], user[0][1]))

            
        if function_call.data == 'yes_register':
            print('–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Ç—Å—Ç—Ä–∞—Ü–∏—é')
        if function_call.data == "no_true":
            bot.send_message(function_call.message.chat.id, '–Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞')
        if function_call.data == 'add_zip':
            msg_add = bot.send_message(function_call.message.chat.id, '–í–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ó–ò–ü')
            bot.register_next_step_handler(msg_add, add_zip)
            
        if function_call.data == 'change_zip':
            msg = bot.send_message(function_call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä')
            bot.register_next_step_handler(msg, change_status_zip)
        if function_call.data == 'del_zip':
            bot.send_message(function_call.message.chat.id, '–£–¥–ø–ª–∏—Ç—å')
        if function_call.data == 'get_good':
            data = db.good_list_zip(function_call.message.chat.id)
            for i in range(0, len(data)):
                test_str = '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <blockquote>' + data[i][1] + '</blockquote>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: <blockquote>' + data[i][3] + '</blockquote>'
                bot.send_message(function_call.message.chat.id, test_str, parse_mode='html')
                time.sleep(0.5)
            
            
        if function_call.data == 'get_dab':
            data = db.bad_list_zip(function_call.message.chat.id)
            for i in range(0, len(data)):
                test_str = '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <blockquote>' + data[i][1] + '</blockquote>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: <blockquote>' + data[i][3] + '</blockquote>'
                bot.send_message(function_call.message.chat.id, test_str, parse_mode='html')
                time.sleep(0.5)
            
            
            
            
            
        if function_call.data == 'get_all':
            bot.send_message(function_call.message.chat.id, '–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–∞')
        if function_call.data == 'yes_zip_add':
            str = function_call.message.text.split()
            num = 0
            num_serial = 0
            i = 0
            while i < len(str):
                if str[i] == '–°–µ—Ä–∏–π–Ω—ã–π':
                    num = i
                if str[i] == '–Ω–æ–º–µ—Ä:':
                    num_serial = i + 1
                i += 1
            tmp_str = ''
            for i in range(5, num):
                tmp_str += str[i] + ' '

            number_zip = str[num_serial]
            otvet = db.add_zip(function_call.message.chat.id, tmp_str, number_zip)
            bot.send_message(function_call.message.chat.id, otvet)
        if function_call.data == 'spisat_zip':
            msg = bot.send_message(function_call.message.chat.id, '–í–≤–µ–¥–∏—Ç–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ø–∏—Å—ã–≤–∞–µ–º–æ–≥–æ –ó–ò–ü:')
            bot.register_next_step_handler(msg, spis_zip)
        if function_call.data == 'yes_spisat':
            str = function_call.message.text.split()
            num = 0
            i = 0
            while i < len(str):
                if str[i] == '–Ω–æ–º–µ—Ä:':
                    num = i + 1
                i += 1
            otc = db.spisat_zip(function_call.message.chat.id, str[num])
            bot.send_message(function_call.message.chat.id, otc, parse_mode='html')
        if function_call.data == 'yes_change_status_zip':
            str = function_call.message.text.split()
            i = 0
            num_serial = 0
            while i < len(str):
                if str[i] == '–Ω–æ–º–µ—Ä:':
                    num_serial = i + 1
                i += 1
            otvet = db.change_status_zip(function_call.message.chat.id, str[num_serial])
            bot.send_message(function_call.message.chat.id, otvet, parse_mode='html')

bot.polling(none_stop=True, interval=0)
