import local_settings as settings
import db as db
import web as web
import telebot
from telebot import types
import time
import os
import photo as phs


bot = telebot.TeleBot(settings.bot_token)
bot.delete_webhook()

bot.set_my_commands([
    telebot.types.BotCommand('/start', "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—Å—è"),
    telebot.types.BotCommand('/add_gaz', '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–∞–≤–∫—É'),
    telebot.types.BotCommand('/get_gaz', '–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –∑–∞–ø—Ä–∞–≤–∫–∏'),
    telebot.types.BotCommand('/get_km', '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–µ–≥ –∑–∞ –º–µ—Å—è—Ü'),
    telebot.types.BotCommand('/get_gaz_list', '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–∞–≤–æ–∫ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ'),
    telebot.types.BotCommand('/register', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
    telebot.types.BotCommand('/help', '–ü–æ–º–æ—â—å'),
    telebot.types.BotCommand('/callback', '–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
])

@bot.message_handler(commands=['start'])
def handle_start(message):
   msg = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
   chat_id = message.chat.id
   bot.send_message(message.chat.id, msg) 
   
   
@bot.message_handler(commands=['help'])
def handle_start(message):
   msg_1 = "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ—Ç–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–æ–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ /register. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ—Ç—É —Å–æ–æ–±—â–∏—Ç—å –≤–∞—à –ª–æ–≥–∏ –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–∞–π—Ç–∞, –ø–æ—Å–ª–µ –±–æ—Ç –ø—Ä–æ–≤–µ–¥–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
   msg_2 = "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ–±–µ–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ –≤ <b>–ª–∏—Ç—Ä–∞—Ö</b>"
   bot.send_message(message.chat.id, msg_1, parse_mode='html')
   bot.send_message(message.chat.id, msg_2, parse_mode='html')
   
@bot.message_handler(commands=['callback'])
def handle_start(message):
   msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
   bot.register_next_step_handler(msg, fcalbuck)
   
def fcalbuck(message):
    msg = "–ü–æ–ª—É—á–µ–Ω–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" 
    bot.send_message(7831441950, msg, parse_mode='html')
    bot.send_message(7831441950, message.text, parse_mode='html')
 
 
@bot.message_handler(commands=['get_km'])
def get_km(message):
    user = db.get_user_data(message.chat.id)
    bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ')
    #–ü–æ–ª—É—á–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
    km = web.get_km(user[0][0], user[0][1])
    
    #–ü–æ–ª—É—á–∞—é –∑–∞–ø—Ä–∞–≤–∫–∏
    gaz = db.get_km(message.chat.id) * 10

    zapas = km - gaz
    
    if zapas > 0:
        msg = '–¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫, —Ç–≤–æ–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ –±–æ–ª—å—à–µ —á–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–µ–Ω–∑–∏–Ω–∞. –¢—ã –ø—Ä–æ–µ—Ö–∞–ª <b>' + str(zapas) + '–∫–º</b>, –∏ —É —Ç–µ–±—ã –≤ –∑–∞–ø–∞—Å–µ ' + str(zapas / 10) + ' <b>–ª–∏—Ç—Ä–æ–≤</b>'
        msg_1 = '–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Ç—ã –ø—Ä–æ–µ—Ö–∞–ª <b>' + str(km) + ' –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤</b>, –∏ –∑–∞–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ <b>' + str(gaz / 10) + ' –ª–∏—Ç—Ä–æ–≤.</b>'
        bot.send_message(message.chat.id, msg_1, parse_mode='html')
        bot.send_message(message.chat.id, msg, parse_mode='html')
    if zapas < 0:
        msg = '–¢–≤–æ–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–µ–Ω–∑–∏–Ω–∞. –¢—ã –≤ –º–∏–Ω—É—Å–µ –Ω–∞ <b>' + str(zapas) + 'km</b> –∏–ª–∏ –Ω–∞ <b>' + str(zapas / 10) + '–ª–∏—Ç—Ä–æ–≤</b> –±–µ–Ω–∑–∏–Ω–∞'
        msg_1 = '–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Ç—ã –ø—Ä–æ–µ—Ö–∞–ª <b>' + str(km) + ' –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤</b> –∏ –∑–∞–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ <b>' + str(gaz / 10) + ' –ª–∏—Ç—Ä–æ–≤</b>.'
        bot.send_message(message.chat.id, msg_1, parse_mode='html')
        bot.send_message(message.chat.id, msg, parse_mode='html')
    if zapas == 0:
        msg = '–¢–≤–æ–π –ø—Ä–æ–±–µ–≥ —Ä–∞–≤–µ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–µ–Ω–∑–∏–Ω–∞'
        msg_1 = '–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Ç—ã –ø—Ä–æ–µ—Ö–∞–ª ' + str(km) + ' –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤, –∏ –∑–∞–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ ' + str(gaz / 10) + ' –ª–∏—Ç—Ä–æ–≤.'
        bot.send_message(message.chat.id, msg_1, parse_mode='html')
        bot.send_message(message.chat.id, msg, parse_mode='html')


@bot.message_handler(commands=['add_gaz'])
def fadd_gaz(message):
    msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–ø—Ä–∞–≤–∏–ª–∏')
    bot.register_next_step_handler(msg, add_gaz)
    
def add_gaz(message):
    try:
        numb = int(message.text)
        msg = db.add_gas(message.chat.id, numb)
        bot.send_message(message.chat.id, msg)
    except:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å')
    
    
@bot.message_handler(commands=['get_gaz'])
def get_gaz(message):
    msg = db.get_km(message.chat.id)
    bot.send_message(message.chat.id, msg)
    
@bot.message_handler(commands=['get_gaz_list'])
def get_gaz(message):
    data = db.get_gaz_list(message.chat.id)
    str_test =''
    for i in range(0, len(data)):
        msg = str(data[i][1]) + ' –≤—ã –∑–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ ' + str(data[i][0]) + ' –ª–∏—Ç—Ä–æ–≤'
        str_test += ('<i>' + str(data[i][1])) + '</i>' + '\n<span class="tg-spoiler">–í—ã –∑–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ ' + str(data[i][0]) + ' –ª–∏—Ç—Ä–æ–≤</span>\n'
        time.sleep(0.5)
        
    bot.send_message(message.chat.id, str_test, parse_mode='html')

 
 
@bot.message_handler(commands=['exel'])
def exel(message):
    bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞')
    user = db.get_user_data(message.chat.id)
    file = web.get_list(user[0][0], user[0][1], message.chat.id)
    doc = open(file, 'rb')
    bot.send_document(message.chat.id, doc)
    bot.send_message(message.chat.id, '–í–∞–º –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª.')
    os.remove(file)
    bot.send_message(message.chat.id, '–§–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª —É–¥–∞–ª–µ–Ω')

@bot.message_handler(commands=['test'])
def test(message):
    str_b = '<b>–≠—Ç–æ b </b>'
    str_i = '<i> This is i </i>'
    str_u = '<u>This is u</u>'
    str_s = '<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>'
    str_span = '<span class="tg-spoiler">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>'
    str_bold = '<b>bold <i>italic bold <s>italic bold strikethrough <span class="tg-spoiler">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>'
    str_a = '<a href="http://www.example.com/">inline URL</a>'
    str_line = '<a href="tg://user?id=7831441950">inline mention of a user my</a>'
    str_em = '<tg-emoji emoji-id="5368324170671202286">üëç</tg-emoji>'
    str_code = '<code>inline fixed-width code</code>'
    str_pre = '<pre>pre-formatted fixed-width code block</pre>'
    str_pre_code = '<pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>'
    str_block = '<blockquote>Block quotation started\nBlock quotation continued\nThe last line of the block quotation</blockquote>'
    str_q = '<blockquote expandable>Expandable block quotation started\nExpandable block quotation continued\nExpandable block quotation continued\nHidden by default part of the block quotation started\nExpandable block quotation continued\nThe last line of the block quotation</blockquote>'
    bot.send_message(message.chat.id, str_b, parse_mode='html')
    bot.send_message(message.chat.id, str_i, parse_mode='html')
    bot.send_message(message.chat.id, str_u, parse_mode='html')
    bot.send_message(message.chat.id, str_s, parse_mode='html')
    bot.send_message(message.chat.id, str_span, parse_mode='html')
    bot.send_message(message.chat.id, str_bold, parse_mode='html')
    bot.send_message(message.chat.id, str_line, parse_mode='html')
    bot.send_message(message.chat.id, str_em, parse_mode='html')
    bot.send_message(message.chat.id, str_code, parse_mode='html')
    bot.send_message(message.chat.id, str_pre, parse_mode='html')
    bot.send_message(message.chat.id, str_pre_code, parse_mode='html')
    bot.send_message(message.chat.id, str_block, parse_mode='html')
    bot.send_message(message.chat.id, str_q, parse_mode='html')
    bot.send_message(message.chat.id, str_a, parse_mode='html')
    bot.send_message(message.chat.id, 'Message')

    
    
@bot.message_handler(commands=['delete'])
def delete_user(message):
    bot.send_message(message.chat.id, db.delete_user(message.chat.id))

@bot.message_handler(commands=['register'])
def registration(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω")
    bot.register_next_step_handler(msg, enter_password)
    
def enter_password(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å")
    bot.register_next_step_handler(msg, register_user, message.text)
    
def register_user(message, login):
    ret = '–í–∞—à –ª–æ–≥–∏–Ω: ' + login + '\n–í–∞—à –ø–∞—Ä–æ–ª—å: ' + message.text
    markup = types.InlineKeyboardMarkup()
    btn_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes_tru')
    btn_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no_true')
    markup.row(btn_yes, btn_no)
    bot.send_message(message.chat.id, ret, parse_mode='Markdown', reply_markup=markup)
    

@bot.callback_query_handler(func=lambda call:True)
def response(function_call):
    if function_call.message:           
        if function_call.data == "yes_tru":
            str = function_call.message.text.split()
            user_login = str[2]
            user_password = str[5]
            bot.send_message(function_call.message.chat.id, db.register_user(user_login, user_password, function_call.message.chat.id))
            bot.send_message(function_call.message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
            
            user = db.get_user_data(function_call.message.chat.id)
            bot.send_message(function_call.message.chat.id, web.test_auth(user[0][0], user[0][1]))

            
        if function_call.data == 'yes_register':
            print('–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Ç—Å—Ç—Ä–∞—Ü–∏—é')
        if function_call.data == "no_true":
            bot.send_message(function_call.message.chat.id, '–Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞')


bot.polling(none_stop=True, interval=0)
